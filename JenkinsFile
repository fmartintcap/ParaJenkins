
pipeline {
    
    agent any
    
    parameters {
      choice choices: ['Azure', 'AWS'], description: 'Cloud donde contratar el entorno de integración', name: 'PROVEEDOR_CLOUD'
      booleanParam description: 'Indica si probar sólo en chrome o en todos los navegadores', name: 'PRUEBAS_UI_COMPLETAS'
    }

    triggers {
      cron 'H * * * *'
    }
    tools {
      maven 'Mimaven Muy Guay pa compilar version 3.6'
    }

    stages {
        
        stage('1-Compilacíon/empaquetado básico'){
            steps {
                echo 'Lo que necesite hacer para compilar mi código'
                sh 'mvn compile'
                // Dependerá de si es maven, gradle, msbuild, npm, yarn, webpack,...
            }
        }
        
        stage('2-Pruebas básicas'){
            
            stages {

                stage('2.1-Pruebas unitarias'){
                    steps {
                        echo 'Realizar pruebas unitarias'
                        // Dependerá de si es maven, gradle, msbuild, npm, yarn, webpack,...
                        // Y dependerá del framqwork de pruebas unitarias que use
                    }
                    post{
                        always {
                            echo 'Guardo el informe de pruebas unitarias'
                            junit 'target/surefire-reports/*.xml'
                            // Y dependerá del framawork de pruebas unitarias que use
                        }
                    }
                }
                
                stage('2.2-Pruebas estáticas'){
                    steps {
                        echo 'Mandar el código a un sistema para su análisis'
                        // Algo así como un sonarqube
                        // Este trabajo se lanza de forma asíncrona
                    }
                    post{
                        always {
                            echo 'Obtengo información de sonarqube... indicando si el proyecto es apto o no'
                            // Y dependerá del framawork de pruebas unitarias que use
                        }
                    }
                }
            }
            
        }
        
        stage('3-Empaquetado de mi app para integración'){
            stages{
                stage('3.1-Empaquetar la app para su posible ejecución'){
                    steps {
                        echo 'Empaqueto'
                        // Por ejemplo... genero war... exe
                    }
                }
                
                stage('3.2-Empaquetar las pruebas'){
                    steps {
                        echo 'Empaqueto los programas de prueba'
                    }
                }
            }
        }
        
        stage('4-Creo el entorno de integración'){
            steps{
                // Partimos de imágenes base
                    // Alquilar infra en un cloud:
                    echo('Scripts de terraform')
                    // Crear una vm on premisses: VMWare
                    echo('Scripts de vagrant')
                    // Crear un(os) pod(s) en kubernetes<=Openshift
                    echo('Scripts de kubernetes ... helm')
                    // Contenedor(es)
                    echo('Creo unos contenedores en 3 maquinas que tengo tiradas por aquí... o en esta misma.')
                // A lo mejor tengo que configurar/instalar software adicional
                echo('Scripts de ansible...puppet, chef')
                
            }
        }
        
        stage('5-Instalarlo en Integración'){
            stages{
                stage('5.1-Instalo la app'){
                    steps {
                        echo 'Instalo mi app... por ejemplo en un webserver, webapp server'
                        echo 'Crear unos scripts de BBDD... o cargar unos datos en la BBDD Integración'
                    }
                }
                
                stage('5.2-Instalación de las pruebas'){
                    steps {
                        echo 'Instalo las pruebas en el entorno de integración'
                    }
                }
                
                stage('5.3-SmokeTest: Prueba de instalación'){
                    steps {
                        echo 'Me aseguro que aquello se instaló correctamente'
                    }
                }
                
            }
        }
        
        //[....]Pruebas

        stage('6-Pruebas de Integración'){
            stages{
                stage('6.1-Pruebas funcionales e UI'){
                    parallel {
                        stage('6.1.1-Pruebas funcionales'){
                            steps {
                                echo 'Pruebas integración'
                                echo 'Pruebas sistema'
                                echo 'Pruebas aceptación'
                                echo 'Pruebas servicios web soapui'
                                echo 'Pruebas servicios web postman'
                            }
                            post{
                                always {
                                    echo 'Guardar informes de pruebas funcionales'
                                }
                            }
                        }
                        //stage('6.1.2-De UI'){
                        stage('6.1.2.1-Safari'){
                            steps {
                                echo 'Pruebas safari'
                            }
                        }
                        stage('6.1.2.1-Firefox'){
                            steps {
                                echo 'Pruebas firefox'
                            }
                        }
                        stage('6.1.2.1-Chrome'){
                            steps {
                                echo 'Pruebas chome'
                            }
                        }
                                //...

                    }
                    post{
                        always {
                            echo 'Guardar informes de pruebas de UI'
                        }
                    }
                    when {
                        expression {
                            return param.PRUEBAS_UI_COMPLETAS
                        }
                    }
                }    
                
                stage('6.2-De carga'){
                    steps { // JMeter LoadRunner Rational
                        echo 'Pruebas de carga 1'       // Linea base
                        echo 'Pruebas de carga N/2'     // Carga normal
                        echo 'Pruebas de carga N'       // Caso maximo
                        echo 'Pruebas de carga 1x5 N'   // Caso extremo
                    }
                    post {
                        always {
                            echo 'Guardar informes de pruebas de carga'
                        }
                    }
                }
                
                stage('6.3-De estrés'){
                    steps {
                        echo 'Me aseguro que el sistema funciona llevado al limite durante un periodo de tiempo'
                    }
                    post {
                        always {
                            echo 'Guardar informes de pruebas de estres'
                        }
                    }
                }
                stage('6.4-De de H/A'){
                    // Me obligaría a tener un entorno muy parecido al de producción: Cluster activo-activo / Activo -pasivo
                    steps {
                        echo 'Ante el fallo de una parte del sistema, que el sistema sigue en funcionamiento'
                    }
                    post {
                        always {
                            echo 'Guardar informes de pruebas de ha'
                        }
                    }
                }
            }
        }

        

    }
    post{
        always{
            echo 'N-El entorno de integración a la basura !!!!! '
            // Partimos de imágenes base
                // Alquilar infra en un cloud:
                echo('Scripts de terraform')
                // Crear una vm on premisses: VMWare
                echo('Scripts de vagrant')
                // Crear un(os) pod(s) en kubernetes<=Openshift
                echo('Scripts de kubernetes ... helm')
                // Contenedor(es)
                echo('Creo unos contenedores en 3 maquinas que tengo tiradas por aquí... o en esta misma.')
                // A lo mejor tengo que configurar/instalar software adicional
                echo('Scripts de ansible...puppet, chef')
        }
    }
    
}
